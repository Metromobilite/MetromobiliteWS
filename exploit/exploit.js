// *
// Metromobilité is the mobile application of Grenoble Alpes Métropole <http://www.metromobilite.fr/>.
// It provides all the information and services for your travels in Grenoble agglomeration.

// Copyright (C) 2013
// Contributors:
//	NB/VT - sully-group - www.sully-group.fr - initialisation and implementation

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// *

var sourceAtmo,sourceEvtTr,sourcePoints;
var layerAtmo,layerEvtTr,layerTrr,layerTrrC38,layerPME;
var map;

function ajouteLayerAtmo(nomLayer,idcarte,url_carte,options) {
	try{
		var layer;
		var map = maps[idcarte];
		if (!options) options = {};

		if (getLayer(idcarte,nomLayer)!=null) return;
		if (!sourceAtmo) {
			sourceAtmo = new ol.source.ImageStatic({
				attributions: [new ol.Attribution({html: '&copy; <a href="http://www.air-rhonealpes.fr">Air Rhone-Alpes</a>'})],
				url: url_carte,
				projection: ol.proj.get("EPSG:3857"),
				imageExtent: ol.extent.boundingExtent( [[409000, 5476000],[834058, 5866000]])
			});
			var idEvt =null;
			idEvt = sourceAtmo.on('change', function() {
				switch (sourceAtmo.getState()) {
				case 'ready':
					sourceAtmo.unByKey(idEvt);
					$( document ).trigger( 'evtSourceChargee', 'atmo' );
					break;
				case 'error':
					sourceAtmo.unByKey(idEvt);
					window.console.log('source loaded error');
					break;
				}
			});
		}
		layer = new ol.layer.Image({source: sourceAtmo,opacity: 0.75});
		layer.set('visible',false);
		map.addLayer(layer);
		return layer;

		/*if (options.containerSelector) {
			ajouteListeFeature(containerSelector,liClass,liSelectedClass,nomLayer,idcarte,filtreVisible);
		}*/
	} catch(e) {
		console.error(e.lineNumber+' : '+e.message);
	}
}

function initCarte() {
	map = initMap('map');
	map.getView().setCenter(ol.proj.transform([5.74,45.24], 'EPSG:4326', 'EPSG:3857'));
	map.getView().setZoom(10);

	layerTrr = ajouteLayerManuel('trr','map',{fctStyle:getStylesTrr});
	sourceTrr = layerTrr.getSource();
	chargeTrr('map',sourceTrr);
	layerTrr.set('visible',true);

	layerTrrC38 = ajouteLayerManuel('trrC38','map',{fctStyle:getStylesTrr});
	sourceTrrC38 = layerTrrC38.getSource();
	chargeTrrC38('map',sourceTrrC38);
	layerTrrC38.set('visible',true);
	
	layerEvtTr = ajouteLayerManuel('evtTr','map',{fctStyle:getStylesEvt/*,detailsCallback:getDetails,detailsSeul:true*/});
	sourceEvtTr = layerEvtTr.getSource();
	layerEvtTr.set('visible',true);

	stylesTypes.PME={text:'LIBELLE',titre:'Comptage',textMaxRes:1};
	sourcePoints = creeSourceType('map','PME',{fctStyle:getStylesPME,fctDetails:getDetails});
	layerPME = ajouteLayerType('map','PME','PME',{fctStyle:getStylesPME,source:sourcePoints,layerSwitcherName:'PME',noSwitcher:true});
	layerPME.set('visible',false);
	
	return map;
}

function parseAtmoFull(json, id) {
	var date = json.date;
	$('#'+id+' .date').html(moment(json.time).format('DD/MM/YYYY HH:mm'));
	for (p in json) {
		if (p != 'date' && p != 'date_modification' && p != 'time' && p != 'url_carte') {
			if (json[p] && json[p] != null) {
				if(json[p][date]) {
					$('#'+id+' .'+p).html(json[p][date].texte);
				} else if (typeof(json[p])!= 'object') {
					$('#'+id+' .'+p).html(json[p].replace(/&lt;br\s*[\/]?&gt;/gi,'<br/>'));
				}
			}
		}
	}
	//$('#'+id+' img').attr('src',json.url_carte);
	layerAtmo = ajouteLayerAtmo('atmo','map',json.url_carte);
}

function getDetails(f) {
	return 'toto';
}

function getStylesPME(feature,resolution) {

	var nsv = feature.get('nsv');
	if (typeof(nsv) == "undefined") {
		nsv=0;
		feature.set('nsv',nsv);
	}
	var color;
	if (nsv==0) return;
	if (nsv==1) color= VERT;
	else if (nsv==2) color= ORANGE;
	else if (nsv==3) color= ROUGE;
	else if (nsv==4) color= '#000000';
	else {
		console.log('nsv incorrect : '+ nsv);
		return [];
	}
	
	var styles =[];
	if (feature.getGeometry().getType() == 'Point') {
		if (!styleCache['stylePoint_'+color]) {
			styleCache['stylePoint_'+color] = new ol.style.Style({
				zIndex: 13,
				image: new ol.style.Circle({
					radius: 6,
					fill: new ol.style.Fill({color: color}),
					stroke: new ol.style.Stroke({color: '#000000', width: 1})
				})
			});
		} 
		//styles = resolution < 35 ? [styleCache['stylePoint_'+color]] : [];
		styles =[styleCache['stylePoint_'+color]];
	}
	return styles ;
}